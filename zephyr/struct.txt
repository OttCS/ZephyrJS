ZEPHYR {                                ZEPHYR provides the user with easy-to-use functions to set up
    version                             Version of ZEPHYR
    mouse {                             Created when createMouseListener() is called, stores mouse data/functions
        data                            A map that stores mouse data
        getX()                          Returns the last known mouse x-coord
        getY()                          Returns the last known mouse y-coord
        isDown(buttonString)            buttonString: "left"/"middle"/"right", Returns true/false if it is pressed
    }
    key {                               Created when createKeyListener() is called, stores keyboard data/functions
        data                            A map that stores keyboard data
        isDown(keyString)               keyString: character or "enter", "shift", etc, Returns true/false if it is pressed
    }
    cacheMap                            Internal storage mechanism for loading/storing/retrieving images
    layerMap                            Internal storage mechanism for different layers
    spriteMap                           Internal storage for created Sprites
    utils {                             Utilities for programmers
        setTitle(title)                 Sets the tab name
        addLayer(layerName)             Adds a layer to the layerMap for rendering
        cache(imgURL)                   Loads the image at the specified path into memory (cacheMap)
        setSprite(spriteName, obj)      Creates/sets a Sprite in memory to the provided object
        getSprite(spriteName)           Returns a sprite object from storage
        createMouseListener()           Starts collecting data about mouse movements and clicks for interaction
        createKeyListener()             Starts collecting key presses for interaction
        lap()                           A timing function similar to a stopwatch, it returns the time since the last lap()
        setViewCenter({x, y})             Moves the scene camera, changing the rendered position of Sprites with the 
    }
    scene {                             The visual ouput
        x                               The leftmost rendered pixel in the scene, used for culling sprites and set by setViewCenter()
        y                               The topmost rendered pixel in the scene, used for culling sprites and set by setViewCenter()
        width                           The width (in pixels) of the scene
        height                          The height (in pixels) of the scene
        smooth                          Boolean if the scene should smooth pixels
        view                            The DOM element that holds the layered canvases
        pxScale {                       The proportional scale of a pixel to the 0.0-1.0 display
            x                           x value ^ 
            y                           y value ^
        }
        viewCenter {                    The point of view center of the canvas
            x                           Defaults to 0.5
            y                           Defaults to 0.5
        }
    }
    system {                            Functions that ZEPHYR uses to help do things
        renderLoop()                    Self-calling loop that takes care of rendering Sprites to layers
        getSceneDOMBounds()             Gets the DOM bounds of the scene, used by the mouse listener
        lap                             Stores the last time called by lap()
        width                           Stores the bounds width of the scene
        height                          Stores the bounds height of the scene
        x                               Stores the top-left pixel x-coord of the scene
        y                               Stores the top-left pixel y-coord of the scene
    }
    math {                              ZEPHYR's built-in math functions (collisions)
        inScene(a)                      Returns true/false if the object is in the rendered scene
        collision(a, b)                 Returns true/false if the objects are colliding
    }
    stat {                              Stores statistics, if specified to show them
        active                          True/False whether to get/show statistics
        fps                             Current fps
        ms                              Where performance.now() can be stored for inter-frame timings
        element                         The actual DOM element that shows information
        layerCulledSprites              Number of sprites that are already drawn from a previous frame
        culledSprites                   Number of sprites outside the render window that are not drawn
    }
    Application(settings)               The "constructor" that sets up the scene and begins rendering
        settings {                      Stores settings passed into the constructor
            width                       Pixel height of canvas
            height                      Pixel height of canvas
            smooth                      True/False whether to smooth scaled canvases
            statistics                  True-Show scene statistics | False-none)
        }
}

layer {                                 Stored structure for layers
    edited                              If sprites are added that pertain to this layer, this lets the renderLoop know to clear
    element                             The actual DOM element <canvas>
    ctx                                 The context used for drawing
    minXDraw                            Used for optimized clearing
    minYDraw                            ^
    maxXDraw                            ^
    maxYDraw                            ^
}

sprite {                                Stored structure for Sprites
    layer                               The layer that it will be drawn onto
    src                                 The cached imgURL to draw
    x                                   The x coordinate to draw the anchor of the Sprite at
    y                                   The y coordinate to draw the anchor of the Sprite at
    anchor {                            Where the Sprite will be positioned relative to its coords
        x                               (0.0-1.0) the x position of the Sprite anchor, relative to image width
        y                               (0.0-1.0) the y position of the Sprite anchor, relative to image width
    }
    draw                                Whether or not to draw the sprite during the renderLoop
    cameraDependantPosition             Sprite's rendered position changes based on the Camera's position
    data                                Engine-produced data for faster rendering and collision math
}